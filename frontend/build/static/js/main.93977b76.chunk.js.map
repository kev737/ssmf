{"version":3,"sources":["helpers/api.js","contexts/events.tsx","pieces/Selectable.tsx","App.js","reportWebVitals.js","index.js"],"names":["axios","create","baseURL","process","EventsContext","createContext","events","postEvent","event","a","refresh","deletePost","id","EventsProvider","state","isLoading","bind","this","API","post","then","reply","catch","window","alert","get","setState","data","map","start","Date","end","title","console","log","delete","Provider","value","props","children","Component","localizer","momentLocalizer","moment","Selectable","show","selectedEvent","closeModal","Consumer","eventsContext","Modal","onHide","Header","closeButton","Title","Body","Footer","Button","variant","onClick","selectable","defaultView","scrollToTime","defaultDate","onSelectEvent","style","height","onSelectSlot","prompt","error","select","React","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.93977b76.chunk.js","sourcesContent":["import axios from 'axios'\n\nexport default axios.create(\n  {\n    baseURL: process.env.REACT_APP_URL_PREFIX\n  })","import React, { Component, createContext } from 'react'\nimport API from '../helpers/api'\nimport { event } from '../types/event'\n\nexport const EventsContext = createContext(\n  {\n    events: [], \n    postEvent: async (event:event) => {}, \n    refresh: async () => {}, \n    deletePost: async (id: number) => {}\n  }\n)\n\ninterface eventsPayload {\n  id: number, \n  description: string | null,\n  start: Date,\n  end: Date,\n  title: string,\n  created_at: Date,\n  updated_at: Date,\n}\n\nexport class EventsProvider extends Component {\n  state={ events: [], isLoading: true}\n  constructor(){\n    super({})\n\n    this.refresh = this.refresh.bind(this)\n    this.deletePost = this.deletePost.bind(this)\n  }\n  async componentDidMount(){\n    await this.refresh()\n  }\n\n  async postEvent(event: event){\n    return await API.post('/events/', event).then(\n      (reply) => {\n      }).catch( (reply) => {\n        window.alert('Something went wrong. Please try again.')\n      })\n  }\n\n  async refresh(){\n    await API.get('/events/').then( \n      (reply) => {\n        this.setState({\n          events: reply.data.map( (data : eventsPayload) => { return {start: new Date(data.start), end: new Date(data.end), title: data.title, id: data.id}}),\n          isLoading: false\n        })\n      }\n    ).catch( (data) => {\n      console.log('Something went wrong.')\n    })\n  }\n\n  async deletePost(id: number){\n    await API.delete(`/events/${id}`).then(\n      async () => await this.refresh()\n    ).catch( () => window.alert('Something went wrong deleting that post. Please try again.')\n    )\n  }\n\n  render() {\n    return this.state.isLoading? <div>Loading...</div> : (\n      <EventsContext.Provider value={{...this.state, postEvent: this.postEvent, refresh: this.refresh, deletePost: this.deletePost}}>\n        {this.props.children}\n      </EventsContext.Provider>\n    )\n  }\n}\n\nexport default EventsProvider\n","import React from 'react'\nimport { Calendar, Views, momentLocalizer } from 'react-big-calendar'\nimport moment from 'moment'\nimport { EventsContext } from '../contexts/events'\nimport { event } from '../types/event'\nimport history from '../helpers/history'\nimport { Button, Modal } from 'react-bootstrap'\n\nconst propTypes = {}\nconst localizer = momentLocalizer(moment)\n\nclass Selectable extends React.Component< {}, {events: Array<event>, show: boolean, selectedEvent: event}> {\n  constructor() {\n    super({})\n\n    this.state = { events : [], show: false, selectedEvent: {start: new Date(0), end: new Date(0), title: ''}}\n    this.closeModal = this.closeModal.bind(this)\n  }\n\n  closeModal(){\n    this.setState({...this.state, show: false})\n  }\n\n  render() {\n    return (\n      <EventsContext.Consumer>{ (eventsContext) =>\n        {\n          const {events, postEvent, refresh, deletePost} = eventsContext\n\n          const completeDelete = (id: number) => {\n            deletePost(id)\n            this.closeModal()\n          }\n          const select = ({ start, end } : {start : Date, end: Date}) => {\n            const title = window.prompt('New Event name')\n            if (title){\n              postEvent({start: start, end: end, title: title}).then(() => {\n                refresh()\n              }).catch( (error) => {\n                console.log(error)\n                window.alert('Something went wrong. Please try again.')\n              })\n            }\n            else{\n              window.alert('Please try again with a title')\n            }\n          }\n\n          return(\n            <> \n            <Modal show={this.state.show} onHide={this.closeModal}>\n              <Modal.Header closeButton>\n                <Modal.Title>Information about Event</Modal.Title>\n              </Modal.Header>\n              <Modal.Body>{`Event title: ${this.state.selectedEvent.title}`}</Modal.Body>\n              <Modal.Footer>\n                <Button variant=\"secondary\" onClick={this.closeModal}>\n                  Cancel\n                </Button>\n                <Button variant=\"primary\" onClick={() => completeDelete(this.state.selectedEvent.id || -1)}>\n                  Delete Event\n                </Button>\n              </Modal.Footer>\n            </Modal>\n            <Calendar\n              selectable\n              localizer={localizer}\n              events={events || this.state.events}\n              defaultView={'week'}\n              scrollToTime={new Date()}\n              defaultDate={new Date()}\n              onSelectEvent={(data: event) => this.setState({...this.state, show: true, selectedEvent: data})}\n              style={{height: '737px'}}\n              onSelectSlot={(data) => {\n                if(typeof(data.start) === 'string' || typeof(data.end) === 'string'){\n                  window.alert('Something went wrong in Calendar')\n                  return\n                }\n                else{\n                  select({start: data.start, end: data.end})\n                }\n                \n              }}\n            />\n            </>\n          )\n        }\n      }\n      </EventsContext.Consumer>\n    )\n  }\n}\n\nexport default Selectable\n","// CSS\nimport './App.css';\nimport 'react-big-calendar/lib/css/react-big-calendar.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n// Pieces\nimport Selectable from './pieces/Selectable';\n\n// Contexts\nimport EventsProvider from './contexts/events';\n\nfunction App() {\n  return (\n    <EventsProvider>\n      <Selectable/>\n    </EventsProvider>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}